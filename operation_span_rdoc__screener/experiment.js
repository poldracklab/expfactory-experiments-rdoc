const OG_CHEIN_SYMM_GRIDS = [
  [
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
  ],
  [
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
  ],
  [
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
  ],
  [
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
  ],
  [
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
  ],
  [
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
  ],
  [
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
  ],
  [
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
  ],
  [
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
  ],
  [
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
  ],
  [
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
  ],
  [
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
  ],
  [
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
  ],
  [
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
  ],
  [
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
  ],
  [
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
  ],
  [
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
  ],
  [
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
  ],
  [
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
  ],
  [
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
  ],
  [
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
  ],
  [
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
  ],
  [
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
  ],
  [
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
  ],
  [
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
  ],
  [
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
  ],
  [
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
  ],
  [
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
  ],
  [
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
  ],
  [
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
  ],
  [
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
  ],
  [
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
  ],
  [
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
  ],
  [
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
  ],
  [
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
  ],
  [
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
  ],
  [
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
  ],
  [
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
  ],
  [
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
  ],
  [
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
  ],
  [
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
  ],
  [
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
  ],
  [
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
  ],
  [
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
  ],
  [
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
  ],
  [
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
  ],
  [
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
  ],
  [
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
  ],
  [
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
  ],
  [
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
  ],
  [
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
  ],
  [
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
  ],
  [
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
  ],
  [
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
  ],
  [
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
  ],
  [
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
  ],
  [
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
  ],
  [
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
  ],
  [
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
  ],
  [
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
  ],
  [
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
  ],
  [
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
  ],
  [
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
  ],
  [
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
  ],
  [
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
  ],
  [
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
  ],
  [
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
  ],
  [
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
  ],
  [
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
  ],
  [
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
  ],
  [
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
  ],
  [
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
  ],
  [
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
  ],
  [
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
  ],
  [
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
  ],
  [
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
  ],
  [
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
  ],
  [
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
  ],
  [
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
  ],
  [
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
  ],
  [
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
  ],
  [
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
  ],
  [
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
  ],
  [
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
  ],
  [
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
  ],
  [
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
  ],
  [
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
  ],
  [
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
  ],
  [
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
  ],
  [
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
  ],
  [
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
  ],
  [
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
  ],
  [
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
  ],
  [
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
  ],
  [
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
  ],
  [
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
  ],
  [
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
  ],
  [
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
  ],
  [
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
  ],
  [
    "white",
    "white",
    "black",
    "black",
    "black",
    "black",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "white",
    "black",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "white",
    "white",
    "white",
    "black",
    "white",
    "black",
    "white",
    "black",
    "white",
    "white",
    "black",
    "white",
    "black",
  ],
];

/* ************************************ * /
/* Define helper functions */
/* ************************************ */
// common
function calculatePartialAccuracy(trials) {
  if (trials.length === 0) return 0; // Handle case where trials array is empty

  const totalAccuracy = trials.reduce((acc, trial) => {
    const { response, spatial_sequence } = trial;
    const correctCount = spatial_sequence.filter(item =>
      response.includes(item)
    ).length;
    const accuracy = correctCount / spatial_sequence.length;
    return acc + accuracy;
  }, 0);

  const partialAccuracy = totalAccuracy / trials.length;
  return partialAccuracy;
}

function shuffleArray(array) {
  // Create a copy of the original array to avoid modifying it directly
  const shuffledArray = array.slice();

  // Perform Fisher-Yates shuffle
  for (let i = shuffledArray.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];
  }

  return shuffledArray;
}

function generateSpatialTrialValues(n) {
  const possibleValues = Array.from({ length: 16 }, (_, i) => i);
  const randomList = [];

  for (let i = 0; i < n; i++) {
    const randomIndex = Math.floor(Math.random() * possibleValues.length);
    randomList.push(possibleValues[randomIndex]);
    possibleValues.splice(randomIndex, 1);
  }

  return randomList;
}

var trialValue;

var getStim = function () {
  let html = '<div class="container">';

  const trialIndex = trialList.shift();

  for (var i = 0; i < 16; i++) {
    if (i === trialIndex) {
      html += '<div class="box active-box"></div>';
    } else {
      html += '<div class="box"></div>';
    }
  }
  trialValue = trialIndex;
  html += "</div>";
  return html;
};

function generateRandomGrid(size) {
  const grid = new Array(size);
  for (let i = 0; i < size; i++) {
    grid[i] = Math.random() < 0.5 ? 0 : 1;
  }
  return grid;
}

function areArraysAsymmetric(arr1, arr2) {
  // Check if arrays are asymmetric (values at each index are not the same)
  return !arr1.every((val, index) => val === arr2[index]);
}

function makeAsymmetricArrays() {
  const size = 32;
  let firstGrid = generateRandomGrid(size);
  let secondGrid = generateRandomGrid(size);

  while (areArraysAsymmetric(firstGrid, secondGrid) === false) {
    // Keep generating new arrays until they become asymmetric
    firstGrid = generateRandomGrid(size);
    secondGrid = generateRandomGrid(size);
  }
  return [firstGrid, secondGrid];
}

function makeAsymmetricArrays() {
  const size = 32;
  const firstGrid = generateRandomGrid(size);
  const secondGrid = generateRandomGrid(size);

  return [{ firstGrid: firstGrid, secondGrid: secondGrid, symmetric: false }];
}

var cheinSymmGrids = [];

function makeCheinSymmGrids() {
  for (i = 0; i < OG_CHEIN_SYMM_GRIDS.length; i++) {
    var grid = [];
    for (j = 0; j < 8 * 8; j++) {
      if (OG_CHEIN_SYMM_GRIDS[i][j] == "black") {
        colorValue = 0;
      } else {
        colorValue = 1;
      }
      grid.push(colorValue);
    }

    symmetric = false;

    for (let i = 0; i < grid.length; i += 8) {
      const group1 = grid.slice(i, i + 4);
      const group2 = grid.slice(i + 4, i + 8);
      if (
        group1[0] == group2[3] &&
        group1[1] == group2[2] &&
        group1[2] == group2[1] &&
        group1[3] == group2[0]
      ) {
        symmetric = true;
      } else {
        break;
      }
    }
    cheinSymmGrids.push({ grid, symmetric });
  }
}

var asymmetricGrids = [];

function makeAsymmetricGrids() {
  for (var i = 0; i < 100; i++) {
    var obj = makeAsymmetricArrays()[0];
    var grid = combineArrays(obj.firstGrid, obj.secondGrid);
    asymmetricGrids.push({ grid: grid, symmetric: obj.symmetric });
  }
}

makeAsymmetricGrids();
makeCheinSymmGrids();

var bothGrids = shuffleArray(asymmetricGrids.concat(cheinSymmGrids));

var getRandomSpatial = function () {
  if (bothGrids.length == 0) {
    makeCheinSymmGrids();
    makeAsymmetricGrids();
    bothGrids = shuffleArray(cheinSymmGrids.concat(asymmetricGrids));
  }
  const stim = bothGrids.shift();
  spatialAns = stim.symmetric;
  return generateDistractorGrid(stim);
};

function getProcessingStimProperties(htmlString) {
  const parser = new DOMParser();
  const doc = parser.parseFromString(htmlString, "text/html");
  const divs = doc.querySelectorAll(".container > div");
  const classList = Array.from(divs).map(div => div.className);

  const parsedClassList = classList.map(item => {
    if (item === "distractor-box active-box") {
      return "black";
    } else if (item === "distractor-box") {
      return "gray";
    } else {
      return item;
    }
  });

  return parsedClassList;
}

var submittedAnswers = [];
var timestampsSubmissions = [];
var timestampsMovingThroughGrid = [];
var trackingCellMovingThroughGrid = [];
var startingCellInGrid;

var generateGrid = function () {
  var randomIndex = Math.floor(Math.random() * 16);
  startingCellInGrid = randomIndex;

  // Variable to store the initial call time
  let initialCallTime = Date.now();

  let activeIndex = randomIndex;
  const activeBoxes = [];

  let html = '<div class="container">';
  for (var i = 0; i < 16; i++) {
    if (i === randomIndex) {
      html += '<div class="box response-active"></div>';
      activeBoxes.push(i);
    } else {
      html += '<div class="box"></div>';
    }
  }
  html += "</div>";

  let spacebarCount = 0;
  const selectedIndexes = [];

  // Declare a variable to store the setTimeout ID
  let timeoutId;
  function handleKeyDown(event) {
    let currentTime = Date.now();
    let timeDifference = currentTime - initialCallTime;
    timestampsMovingThroughGrid.push(timeDifference); // Store timestamp

    const key = event.key;
    const container = document.querySelector(".container");
    const boxes = container.querySelectorAll(".box");

    // Remove active-box class from all boxes
    boxes.forEach(function (box) {
      box.classList.remove("spacebar-box");
    });

    // Update activeIndex based on arrow key input
    let newActiveIndex = activeIndex;
    if (key === "ArrowLeft" && activeIndex % 4 !== 0) {
      newActiveIndex = activeIndex - 1;
    } else if (key === "ArrowRight" && activeIndex % 4 !== 3) {
      newActiveIndex = activeIndex + 1;
    } else if (key === "ArrowUp" && activeIndex >= 4) {
      newActiveIndex = activeIndex - 4;
    } else if (key === "ArrowDown" && activeIndex < 12) {
      newActiveIndex = activeIndex + 4;
    }

    trackingCellMovingThroughGrid.push(newActiveIndex);

    if (newActiveIndex !== activeIndex) {
      // Remove active-box class from all boxes
      boxes.forEach(function (box) {
        box.classList.remove("response-active");
      });
    }

    if (newActiveIndex !== activeIndex) {
      activeIndex = newActiveIndex;
      boxes[activeIndex].classList.add("response-active"); // Add active-box class for arrow key navigation
    }

    if (key === " ") {
      event.preventDefault(); // handling default behavior on keydown event for spacebar. Prevents scrolling of the page. 
      let currentTime = Date.now();
      let timeDifference = currentTime - initialCallTime;
      timestampsSubmissions.push(timeDifference); // Store timestamp

      if (spacebarCount < 4) {
        boxes[activeIndex].classList.add("spacebar-box"); // Add spacebar-box class for spacebar selection
        activeBoxes.push(activeIndex);
        selectedIndexes.push(activeIndex);
        spacebarCount++;
        submittedAnswers.push(activeIndex);
      }

      // Clear any existing setTimeout calls
      clearTimeout(timeoutId);

      timeoutId = setTimeout(() => {
        if (key !== " ") {
          boxes[activeIndex].classList.remove("response-active"); // Remove active-box class if the arrow key was pressed
        }
        boxes[activeIndex].classList.remove("spacebar-box"); // Remove spacebar-box class for spacebar selection
      }, 200);
    }
  }
  // Attach the event listener
  document.addEventListener("keydown", handleKeyDown);

  function resetGrid() {
    activeBoxes.length = 0; // Clear the activeBoxes array
    selectedIndexes.length = 0; // Clear the selectedIndexes array
    spacebarCount = 0;
    sequenceIndex = 0;

    // Remove the event listener
    document.removeEventListener("keydown", handleKeyDown);

    // Clear any remaining state or perform other necessary actions
    submittedAnswers = [];

    // Also reset the initial call time when the grid is reset
    initialCallTime = Date.now();
  }

  return { html, resetGrid };
};

function combineArrays(array1, array2) {
  if (array1.length % 4 !== 0 || array2.length % 4 !== 0) {
    throw new Error("Both arrays must have a length that is a multiple of 4.");
  }

  const combinedArray = [];

  for (let i = 0; i < array1.length; i += 4) {
    combinedArray.push(...array1.slice(i, i + 4), ...array2.slice(i, i + 4));
  }

  return combinedArray;
}

var generateDistractorGrid = function (stim) {
  let html = '<div class="container">';
  const grid = stim.grid;

  for (let i = 0; i < grid.length; i++) {
    if (grid[i] == 1) {
      html += '<div class="distractor-box active-box"></div>';
    } else {
      html += '<div class="distractor-box"></div>';
    }
  }

  html += "</div>";

  return html;
};

const getInstructFeedback = () =>
  `<div class="centerbox"><p class="center-block-text">${feedbackInstructText}</p></div>`;

const getFeedback = () =>
  `<div class="bigbox"><div class="picture_box"><p class="block-text">${feedbackText}</p></div></div>`;

const getCurrSeq = () => currSeq;

const getCurrCondition = () => currCondition;

const getCurrBlockNum = () => practiceCount;

/* ************************************ */
/* Define experimental variables */
/* ************************************ */
// common variables

var endText = `
  <div class="centerbox">
    <p class="center-block-text">Thanks for completing this task!</p>
    <p class="center-block-text">Press <i>enter</i> to continue.</p>
  </div>
`;

var feedbackInstructText = `
  <p class="center-block-text">
    Welcome! This experiment will take a couple of minutes.
  </p>
  <p class="center-block-text">
    To avoid technical issues, please keep the experiment tab (on Chrome or Firefox) active and in fullscreen mode for the whole duration of each task.
  </p>
  <p class="center-block-text"> Press <i>enter</i> to begin.</p>
`;

var speedReminder =
  "<p class = block-text>Try to respond as quickly and accurately as possible.</p>";

var spanResponses = [
  "left arrow key",
  "right arrow key",
  "up arrow key",
  "down arrow key",
  "spacebar",
];

// *Timing:
// stimulus and fixation
const stimStimulusDuration = 1000;
const stimTrialDuration = 1000;
const processingStimulusDuration = 2500; // changed from 3000
const processingTrialDuration = 2500; // changed from 3000
const responseBlockDuration = 7000; // changed from 5000
var images = [
  "/static/experiments/operation_span_rdoc__screener/images/operation_span_figure.png",
];

var sumInstructTime = 0; // ms
var instructTimeThresh = 1; // /in seconds

var partialAccuracyThresh = 0.75;

var practiceThresh = 3;

var processingChoices;

function getKeyMappingForTask(group_index) {
  if (group_index % 2 === 0) {
    processingChoices = [
      { keycode: "ArrowLeft", keyname: "left arrow key" },
      { keycode: "ArrowRight", keyname: "right arrow key" },
    ];
  } else {
    processingChoices = [
      { keycode: "ArrowRight", keyname: "right arrow key" },
      { keycode: "ArrowLeft", keyname: "left arrow key" },
    ];
  }
}

var group_index =
  typeof window.efVars !== "undefined" ? window.efVars.group_index : 1;

getKeyMappingForTask(group_index);

var processingAccThresh = 0.85;
var processingRTThresh = 1000;

var practiceLen = 1;
var trialList;

var spatialAns;

var currCondition = "operation";

var numStimuli = 4;

var expStage = "practice";
var currSeq = [];

var practicePromptResponse = `<div class = prompt_box_response>
  <p class = center-block-text style = "font-size:16px; line-height:80%%;">Use the <b>arrow keys</b> to navigate the grid and the <b>spacebar</b> to select the cells colored black in the order they were shown.
  </p>
</div>`;

var correctHTML = "That's correct!";
var incorrectHTML = "Incorrect! The correct cell is highlighted in red.";

var promptText = `<div class=prompt_box_operation>
    <p class = center-block-text style = "font-size:16px; line-height:80%%;">Memorize all the black colored cells.</p>
    <p class = center-block-text style = "font-size:16px; line-height:80%%;">Press <b>"left arrow key"</b> if 8x8 is <b>${
      processingChoices[0].keyname === "left arrow key"
        ? "symmetric"
        : "asymmetric"
    }</b> and <b>"right arrow key"</b> if <b>${
  processingChoices[0].keyname === "left arrow key" ? "asymmetric" : "symmetric"
}</b>.</p>
  </div>`;

var prompt_processing = `<div class=prompt_box_operation>
  <p class = center-block-text style = "font-size:16px; line-height:80%%;">Press <b>"left arrow key"</b> if 8x8 is <b>${
    processingChoices[0].keyname === "left arrow key"
      ? "symmetric"
      : "asymmetric"
  }</b> and <b>"right arrow key"</b> if <b>${
  processingChoices[0].keyname === "left arrow key" ? "asymmetric" : "symmetric"
}</b>.</p>
  </div>`;

var prompt_memorize = `<div class=prompt_box_operation>
    <p class = center-block-text style = "font-size:16px; line-height:80%%;">Memorize the black colored cell.</p>
  </div>`;

/* ************************************ */
/* Set up jsPsych blocks */
/* ************************************ */

var feedbackInstructBlock = {
  type: jsPsychHtmlKeyboardResponse,
  choices: ["Enter"],
  data: {
    trial_id: "instruction_feedback",
    trial_duration: 180000,
  },
  stimulus: getInstructFeedback,
  trial_duration: 180000,
};

var opSpanInstructions = [
  `
  <div class="centerbox">
  <p class='block-text'>
    Please place your fingers on the arrow keys.
  </p>
  <p class='block-text'>
    This task is divided into three parts. You will work through the first and second parts, completing practice sessions for each. Then, you will 
    work through the third and final part of the task which combines the first and second parts. 
  <p class='block-text'>
    During the first part, you will encounter an 8x8 grid filled with black and gray cells.
    You have to determine if the grid is ${
      processingChoices[0].keyname === "left arrow key"
        ? "symmetric"
        : "asymmetric"
    } or ${
    processingChoices[0].keyname === "left arrow key"
      ? "asymmetric"
      : "symmetric"
  }.
  </p>
  <p class='block-text'>
  Press the <b>left arrow key</b> if the grid is <b>${
    processingChoices[0].keyname === "left arrow key"
      ? "symmetric"
      : "asymmetric"
  }</b> and press the <b>right arrow key</b> if it is <b>${
    processingChoices[0].keyname === "left arrow key"
      ? "asymmetric"
      : "symmetric"
  }</b>.
  </p>
  <p class='block-text'>
    When you make a response, a new 8x8 grid will immediately appear. You should complete as many correct symmetry judgments as you can.
  </p>
  <p class='block-text'>
    Then, a fixation (+) will appear on the screen.
  </p>
  <p class='block-text'>
    This sequence of 8x8 grids and a fixation will alternate four times.
  </p>
  </div>
`,
  `
<div class='centerbox'>
  <p class='block-text'>Remember to respond as quickly and accurately as possible to the 8x8 grids as they appear on the screen.</p>
  <p class='block-text'>During the trials, there will be a reminder of the rules at the top of your screen.</p>
  <p class='block-text'>Please make sure you understand the instructions before moving on.</p>
</div>
`,
];

var reminderInstruct = `
  <div class="centerbox">
    <p class="block-text">
      During the practice round, you will receive feedback and a reminder of the rules. These will be removed for the actual test, so make sure that you understand the instructions before moving on.
    </p>
    <p class="block-text">${speedReminder}</p>
  </div>
`;

var instructionsBlock = {
  type: jsPsychInstructions,
  pages: opSpanInstructions,
  allow_keys: false,
  data: {
    trial_id: "instructions",
    trial_duration: null,
    stimulus: opSpanInstructions,
  },
  show_clickable_nav: true,
};

var instructionNode = {
  timeline: [feedbackInstructBlock, instructionsBlock],
  loop_function: function (data) {
    for (i = 0; i < data.trials.length; i++) {
      if (
        data.trials[i].trial_id == "instructions" &&
        data.trials[i].rt != null
      ) {
        rt = data.trials[i].rt;
        sumInstructTime += rt;
      }
    }
    if (sumInstructTime <= instructTimeThresh * 1000) {
      feedbackInstructText =
        "<p class=block-text>Read through instructions too quickly. Please take your time and make sure you understand the instructions.</p><p class=block-text>Press <i>enter</i> to continue.</p>";
      return true;
    } else if (sumInstructTime > instructTimeThresh * 1000) {
      feedbackInstructText =
        "<p class=block-text>Done with instructions. Press <i>enter</i> to continue.</p>";
      return false;
    }
  },
};

var instruction_flowchart = {
  type: jsPsychHtmlKeyboardResponse,
  data: function () {
    return {
      trial_id: "instruction_flowchart",
      exp_stage: "practice",
      trial_duration: 60000,
    };
  },
  choices: ["Enter"],
  stimulus: function () {
    return `
        <div style='width: 50vw; margin: 24px auto 0px auto;'>
          <p class="block-text">The diagram below represents a sample trial.</p>
          <p class="block-text">Please review this diagram carefully and then press <i>enter</i> when you are ready to begin.</p>
        </div>
        <div>
        <img class="flowchart_image" src="${images[0]}" alt='operation_span_figure' />
        </div>
    `;
  },
  trial_duration: 60000,
  response_ends_trial: true,
};

var feedbackText = `
  <div class='centerbox'>
    <div class='feedback_text'>
      <p>Press <i>enter</i> to begin.</p>
    </div>
  </div>`;

var feedbackBlock = {
  type: jsPsychHtmlKeyboardResponse,
  data: function () {
    return {
      trial_id: "practice_feedback",
      exp_stage: "practice",
      trial_duration: 60000,
      block_num: practiceCount,
    };
  },
  choices: ["Enter"],
  stimulus: getFeedback,
  trial_duration: 60000,
  response_ends_trial: true,
};

var expStage = "practice";

var stimulusBlock = {
  type: jsPsychHtmlKeyboardResponse,
  stimulus: function () {
    return getStim();
  },
  stimulus_duration: stimStimulusDuration,
  trial_duration: stimTrialDuration,
  data: function () {
    return {
      trial_id: "practice_stim",
      exp_stage: "practice",
      condition: "operation",
      trial_duration: stimTrialDuration,
      stimulus_duration: stimStimulusDuration,
      block_num: practiceCount,
    };
  },
  choices: ["NO_KEYS"],
  prompt: function () {
    return promptText;
  },
  on_finish: function (data) {
    data["spatial_location"] = trialValue;
    data["block_num"] = practiceCount;
  },
};

var startTime = null;
var checkTime = null;
var endTime = null;
var timeLeft = null;

var initializingTrialIDs = new Set([
  "practice_feedback",
  "practice_ITI",
  "instruction_flowchart",
]);

var timerInitializingTrialIDs = new Set([
  "practice_feedback",
  "practice_ITI",
  "practice_stim",
  "instruction_flowchart",
]);

var waitBlock = {
  type: jsPsychHtmlKeyboardResponse,
  stimulus: function () {
    return getRandomSpatial();
  },
  choices: [processingChoices[0].keycode, processingChoices[1].keycode],
  response_ends_trial: true,
  trial_duration: function () {
    var { trial_id } = jsPsych.data.get().last(1).trials[0];

    if (trial_id === "practice_inter-stimulus") {
      timeLeft = processingTrialDuration - endTime;
      return timeLeft;
    } else {
      return processingTrialDuration;
    }
  },
  on_start: function () {
    var { trial_id } = jsPsych.data.get().last(1).trials[0];
    if (initializingTrialIDs.has(trial_id)) {
      trialList = generateSpatialTrialValues(numStimuli);
    }

    if (timerInitializingTrialIDs.has(trial_id)) {
      startTime = performance.now();
    }
  },
  data: function () {
    return {
      trial_id: "practice_inter-stimulus",
      exp_stage: "practice",
      condition: "operation",
      choices: [processingChoices[0].keycode, processingChoices[1].keycode],
      block_num: practiceCount,
    };
  },
  on_finish: function (data) {
    let processingStimProperties = getProcessingStimProperties(data.stimulus);
    data["order_and_color_of_processing_boxes"] = processingStimProperties;
    data["block_num"] = practiceCount;
    data["correct_spatial_judgement_key"] =
      spatialAns === true
        ? processingChoices[0].keycode.toLowerCase()
        : processingChoices[1].keycode.toLowerCase();
    data["grid_symmetry"] = spatialAns === true ? "symmetric" : "asymmetric";

    // Handling "omissions"
    if (timeLeft === null) {
      if (data.response === null) {
        data["response"] = -1;
      }
    } else {
      if (data.response === null) {
        if (timeLeft > processingRTThresh) {
          data["response"] = -1;
        }
      }
    }

    if (data.response === null || data.response === -1) {
      data["correct_trial"] = null;
    } else {
      if (spatialAns === true) {
        if (data.response === processingChoices[0].keycode.toLowerCase()) {
          data["correct_trial"] = 1;
        } else {
          data["correct_trial"] = 0;
        }
      } else {
        if (data.response === processingChoices[0].keycode.toLowerCase()) {
          data["correct_trial"] = 0;
        } else {
          data["correct_trial"] = 1;
        }
      }
    }
  },
  prompt: function () {
    return promptText;
  },
};

var waitNode = {
  timeline: [waitBlock],
  loop_function: function () {
    checkTime = performance.now();

    endTime = checkTime - startTime;

    if (endTime >= processingTrialDuration) {
      return false;
    }

    return true;
  },
};

function arraysAreEqual(array1, array2) {
  if (array1.length !== array2.length) {
    return false;
  }

  for (let i = 0; i < array1.length; i++) {
    if (array1[i] !== array2[i]) {
      return false;
    }
  }

  return true;
}

var activeGrid;

var practiceFeedbackBlock = {
  type: jsPsychHtmlKeyboardResponse,
  stimulus: function () {
    function arraysEqual(a, b) {
      if (a === b) return true;
      if (a == null || b == null) return false;
      if (a.length !== b.length) return false;
      for (var i = 0; i < a.length; ++i) {
        if (a[i] !== b[i]) return false;
      }
      return true;
    }

    const { response, spatial_sequence } = jsPsych.data.get().last(1).trials[0];
    const common = spatial_sequence.filter(ele =>
      response.includes(ele)
    ).length;

    const areArraysEqual = arraysEqual(response, spatial_sequence);

    const text =
      common === 0 ? "You did not submit any" : `You submitted ${common}`;

    if (areArraysEqual) {
      return `
          <div class='memory_feedback'>
            <p>Correct!</p>
          </div>
        `;
    } else {
      return `
          <div class='memory_feedback'>
            <p>${text} correct responses.</p>
            <p>Please attempt to make all 4 correct responses in the order they were presented.</p>
        </div>`;
    }
  },
  data: function () {
    return {
      exp_stage: "practice",
      trial_id: "practice_feedback",
      trial_duration: 5000, // changed from 500
      stimulus_duration: 5000, // changed from 500
      block_num: practiceCount,
    };
  },
  choices: ["NO_KEYS"],
  stimulus_duration: 5000, // changed from 500
  trial_duration: 5000, // changed from 500
};

var testTrial = {
  type: jsPsychHtmlKeyboardResponse,
  stimulus: function () {
    activeGrid = generateGrid();
    return activeGrid.html;
  },
  choices: ["NO_KEYS"],
  data: function () {
    return {
      trial_id: "practice_trial",
      exp_stage: "practice",
      choices: ["NO_KEYS"],
      trial_duration: responseBlockDuration,
      stimulus_duration: responseBlockDuration,
    };
  },
  trial_duration: responseBlockDuration,
  stimulus_duration: responseBlockDuration,
  prompt: function () {
    return practicePromptResponse;
  },
  on_finish: function (data) {
    var stimTrials = jsPsych.data
      .get()
      .filter({ trial_id: "practice_stim" }).trials;

    var lastTrials = stimTrials.slice(-4);
    var correctResponses = lastTrials.map(trial => trial.spatial_location);

    data["response"] = submittedAnswers;

    if (submittedAnswers.length < 4) {
      data["correct_trial"] = null;
    } else if (submittedAnswers.length == 4) {
      const correct = arraysAreEqual(correctResponses, submittedAnswers);
      data["correct_trial"] = correct ? 1 : 0;
    }

    data["condition"] = "operation";

    var lastInterStimTrials = jsPsych.data
      .get()
      .filter({ trial_id: "practice_stim" });

    var lastInterStimTrialsCorrectAnswers = lastInterStimTrials.trials
      .slice(-4)
      .map(trial => trial.spatial_location);

    data["starting_cell_in_grid"] = startingCellInGrid;

    data["spatial_sequence"] = lastInterStimTrialsCorrectAnswers;
    data["block_num"] = practiceCount;
    data["rt_each_spatial_location_response_grid"] =
      timestampsSubmissions.slice(0, 4);

    data["rt_moving_each_spatial_location_response_grid"] =
      timestampsMovingThroughGrid;

    data["moving_order_spatial_location"] = trackingCellMovingThroughGrid;

    trackingCellMovingThroughGrid = [];
    timestampsSubmissions = [];
    timestampsMovingThroughGrid = [];

    activeGrid.resetGrid();
  },
};

var ITIms = null;

// *** ITI *** //
var ITIBlock = {
  type: jsPsychHtmlKeyboardResponse,
  stimulus: "<div class = centerbox><div class = fixation>+</div></div>",
  is_html: true,
  choices: ["NO_KEYS"],
  data: function () {
    return {
      trial_id: "practice_ITI",
      ITIParams: {
        duration: 5,
      },
      block_num: practiceCount,
      exp_stage: "practice",
      condition: "operation",
    };
  },
  trial_duration: 5000,
  on_finish: function (data) {
    data["trial_duration"] = 5000;
    data["stimulus_duration"] = 5000;
  },
};

const get_processing_only_block_count = () => processing_only_count;

const generate_processing_only_trials = () => {
  // trial sequence
  // [3s processing -> 1000ms fixation] * 4
  // accuracy threshold of 75% to pass, else repeat

  var trials = [];

  for (let i = 0; i < 4; i++) {
    var processing_only_trial = {
      type: jsPsychHtmlKeyboardResponse,
      stimulus: function () {
        return getRandomSpatial();
      },
      choices: [processingChoices[0].keycode, processingChoices[1].keycode],
      response_ends_trial: true,
      prompt: prompt_processing,
      trial_duration: function () {
        var { trial_id } = jsPsych.data.get().last(1).trials[0];
        let timer_initializing_ids = new Set([
          "practice_feedback",
          "processing_only_fixation",
        ]);

        if (timer_initializing_ids.has(trial_id)) {
          startTime = performance.now();
        }

        if (trial_id === "processing_only_trial") {
          return processingTrialDuration - endTime;
        } else return processingTrialDuration;
      },
      on_start: function () {
        var { trial_id } = jsPsych.data.get().last(1).trials[0];

        let timer_initializing_ids = new Set([
          "practice_feedback",
          "processing_only_fixation",
        ]);

        if (timer_initializing_ids.has(trial_id)) {
          startTime = performance.now();
        }
      },
      data: function () {
        return {
          trial_id: "processing_only_trial",
          exp_stage: "processing_only",
          choices: [processingChoices[0].keycode, processingChoices[1].keycode],
        };
      },
      on_finish: function (data) {
        let processingStimProperties = getProcessingStimProperties(
          data.stimulus
        );
        data["order_and_color_of_processing_boxes"] = processingStimProperties;
        data["block_num"] = get_processing_only_block_count();
        data["correct_spatial_judgement_key"] =
          spatialAns === true
            ? processingChoices[0].keycode.toLowerCase()
            : processingChoices[1].keycode.toLowerCase();

        data["grid_symmetry"] =
          spatialAns === true ? "symmetric" : "asymmetric";

        // Handling "omissions"
        if (timeLeft === null) {
          if (data.response === null) {
            data["response"] = -1;
          }
        } else {
          if (data.response === null) {
            if (timeLeft > processingRTThresh) {
              data["response"] = -1;
            }
          }
        }

        if (data.response === null || data.response === -1) {
          data["correct_trial"] = null;
        } else {
          if (spatialAns === true) {
            if (data.response === processingChoices[0].keycode.toLowerCase()) {
              data["correct_trial"] = 1;
            } else {
              data["correct_trial"] = 0;
            }
          } else {
            if (data.response === processingChoices[0].keycode.toLowerCase()) {
              data["correct_trial"] = 0;
            } else {
              data["correct_trial"] = 1;
            }
          }
        }
      },
    };

    var processing_only_node = {
      timeline: [processing_only_trial],
      loop_function: function () {
        checkTime = performance.now();

        endTime = checkTime - startTime;

        if (endTime >= processingTrialDuration) {
          return false;
        }

        return true;
      },
    };

    var fixation_block = {
      type: jsPsychHtmlKeyboardResponse,
      stimulus: "<div class = centerbox><div class = fixation>+</div></div>",
      choices: ["NO_KEYS"],
      data: function () {
        return {
          trial_id: "processing_only_fixation",
          exp_stage: "processing_only_fixation",
          block_num: get_processing_only_block_count(),
        };
      },
      trial_duration: 1000,
      stimulus_duration: 1000,
    };

    trials.push(processing_only_node, fixation_block);
  }

  return trials;
};

var processing_only_count = 0;
var processing_only_node = {
  timeline: [feedbackBlock].concat(generate_processing_only_trials()),
  loop_function: function () {
    const { trials } = jsPsych.data.get().filter({
      trial_id: "processing_only_trial",
      block_num: get_processing_only_block_count(),
    });

    var correct_trials = 0;
    var total_trials = 0;
    var rt = 0;

    for (var i = 0; i < trials.length; i++) {
      if (trials[i].response === -1) {
        total_trials++;
      } else {
        if (trials[i].rt !== null) {
          total_trials++;

          if (trials[i].correct_trial === 1) {
            correct_trials += 1;
            rt += trials[i].rt;
          }
        }
      }
    }

    var accuracy = correct_trials / total_trials;
    var average_rt = rt / correct_trials;

    processing_only_count++;

    if (
      (accuracy >= 0.75 && average_rt <= 1250) ||
      processing_only_count === 2
    ) {
      feedbackText = `
        <div style='height: 85vh !important;' class="centerbox">
        <p class='block-text'>
          Please keep your fingers on the arrow keys.
        </p>
        <p class='block-text'>
          During the next part, you will see a fixation (+) and then a 4x4 grid appear on the screen.
        </p>
        <p class='block-text'>
          This grid will have one cell colored black. Try to remember the location of the black cell.
        </p>
        <p class='block-text'>
          This sequence of a fixation and a 4x4 grid will alternate four times.
        </p>
        <p class='block-text'>
          After the fourth time, a blank 4x4 grid will appear.
        </p>
        <p class='block-text'>
          On the blank 4x4 grid, use the <b>arrow keys</b> to navigate the grid and the <b>spacebar</b> to select the cells you think were colored black in the preceding four 4x4 grids.
          Please select them in the order they were shown (i.e., respond with the location of the first black square in the 4x4 grid, then the 2nd, …).
        </p>
        <p class='block-text'>
          <b>Please note</b>, it's important to be ready to respond promptly when the grid appears, as the screen will move on automatically after a limited time, whether you have responded or not.
        </p>
        <p class='block-text'>
          During the trials, there will be a reminder of the rules at the top of your screen.
        </p>
        <p class='block-text'>
          Please make sure you understand the instructions before moving on.
        </p>
        <p class='block-text'>
          Press <i>enter</i> to begin.
        </p>
        </div>
        `;

      return false;
    } else {
      feedbackText = ``;
      if (accuracy < 0.75) {
        feedbackText +=
          "<p class = block-text>Your accuracy for the 8x8 grid is low.</p>" +
          `<p class = block-text>Try your best determining if the 8x8 grid is ${
            processingChoices[0].keyname === "left arrow key"
              ? "symmetric"
              : "asymmetric"
          } (left arrow key) or ${
            processingChoices[0].keyname === "left arrow key"
              ? "asymmetric"
              : "symmetric"
          } (right arrow key).</p>`;
      }

      if (average_rt > 1250) {
        feedbackText += `<p class='block-text'>
            You are responding too slowly to the 8x8 grids when they appear on the screen.
          </p>
          <p class='block-text'>
            Try to respond (left arrow/right arrow) as quickly and accurately as possible.
          </p>
        `;
      }

      feedbackText += `
          <p class='block-text'>
            Let's repeat the practice once more. Press <i>enter</i> to begin.
          </p>
        `;
    }
    return true;
  },
};

const get_memory_only_block_count = () => memory_only_count;

const generate_memory_only_trials = () => {
  // trial sequence
  // [2500ms fixation -> 1000ms memoranda] * 4
  // accuracy threshold of 75% to pass, else repeat

  var trials = [];

  for (let i = 0; i < 4; i++) {
    var fixation_block = {
      type: jsPsychHtmlKeyboardResponse,
      stimulus: "<div class = centerbox><div class = fixation>+</div></div>",
      choices: ["NO_KEYS"],
      data: function () {
        return {
          trial_id: "memory_only_fixation",
          exp_stage: "memory_only_fixation",
          block_num: get_memory_only_block_count(),
        };
      },
      trial_duration: 2500, // changed from 3000
      stimulus_duration: 2500, // changed from 3000
      on_start: function () {
        var { trial_id } = jsPsych.data.get().last(1).trials[0];

        if (trial_id === "practice_feedback") {
          trialList = generateSpatialTrialValues(4);
        }
      },
    };

    var memory_only_block = {
      type: jsPsychHtmlKeyboardResponse,
      stimulus: function () {
        return getStim();
      },
      stimulus_duration: 1000,
      trial_duration: 1000,
      data: function () {
        return {
          trial_id: "memory_only_stim",
          exp_stage: "memory_only",
          trial_duration: 1000,
          stimulus_duration: 1000,
        };
      },
      choices: ["NO_KEYS"],
      on_finish: function (data) {
        data["spatial_location"] = trialValue;
        data["block_num"] = get_memory_only_block_count();
      },
      prompt: prompt_memorize,
    };

    trials.push(fixation_block, memory_only_block);
  }

  var test_trial = {
    type: jsPsychHtmlKeyboardResponse,
    stimulus: function () {
      activeGrid = generateGrid();
      return activeGrid.html;
    },
    choices: ["NO_KEYS"],
    data: function () {
      return {
        trial_id: "memory_only_trial",
        exp_stage: "memory_only",
        choices: ["NO_KEYS"],
        trial_duration: 7000, // changed from 5000
        stimulus_duration: 7000, // changed from 5000
      };
    },
    trial_duration: 7000, // changed from 5000
    stimulus_duration: 7000, // changed from 5000
    on_finish: function (data) {
      var stimTrials = jsPsych.data
        .get()
        .filter({ trial_id: "memory_only_stim" }).trials;

      var lastTrials = stimTrials.slice(-4);
      var correctResponses = lastTrials.map(trial => trial.spatial_location);

      data["response"] = submittedAnswers;

      if (submittedAnswers.length < 4) {
        data["correct_trial"] = null;
      } else if (submittedAnswers.length == 4) {
        const correct = arraysAreEqual(correctResponses, submittedAnswers);
        data["correct_trial"] = correct ? 1 : 0;
      }

      data["condition"] = "operation";

      var lastInterStimTrials = jsPsych.data
        .get()
        .filter({ trial_id: "memory_only_stim" });

      var lastInterStimTrialsCorrectAnswers = lastInterStimTrials.trials
        .slice(-4)
        .map(trial => trial.spatial_location);

      data["starting_cell_in_grid"] = startingCellInGrid;

      data["spatial_sequence"] = lastInterStimTrialsCorrectAnswers;
      data["block_num"] = get_memory_only_block_count();
      data["rt_each_spatial_location_response_grid"] =
        timestampsSubmissions.slice(0, 4);

      data["rt_moving_each_spatial_location_response_grid"] =
        timestampsMovingThroughGrid;

      data["moving_order_spatial_location"] = trackingCellMovingThroughGrid;

      trackingCellMovingThroughGrid = [];
      timestampsSubmissions = [];
      timestampsMovingThroughGrid = [];

      activeGrid.resetGrid();
    },
    prompt: practicePromptResponse,
  };

  // include feedback block here to match operation span feedback
  var memory_only_feedback = {
    type: jsPsychHtmlKeyboardResponse,
    stimulus: function () {
      function arraysEqual(a, b) {
        if (a === b) return true;
        if (a == null || b == null) return false;
        if (a.length !== b.length) return false;
        for (var i = 0; i < a.length; ++i) {
          if (a[i] !== b[i]) return false;
        }
        return true;
      }

      const { response, spatial_sequence } = jsPsych.data.get().last(1)
        .trials[0];
      const common = spatial_sequence.filter(ele =>
        response.includes(ele)
      ).length;

      const areArraysEqual = arraysEqual(response, spatial_sequence);

      const text =
        common === 0 ? "You did not submit any" : `You submitted ${common}`;

      if (areArraysEqual) {
        return `
          <div class='memory_feedback'>
            <p>Correct!</p>
          </div>
        `;
      } else {
        return `
          <div class='memory_feedback'>
            <p>${text} correct responses.</p>
            <p>Please attempt to make all 4 correct responses in the order they were presented.</p>
        </div>`;
      }
    },
    data: function () {
      return {
        exp_stage: "memory_only",
        trial_id: "memory_only_feedback",
        trial_duration: 5000,
        stimulus_duration: 5000,
        block_num: practiceCount,
      };
    },
    choices: ["NO_KEYS"],
    stimulus_duration: 5000,
    trial_duration: 5000,
  };

  var iti_block = {
    type: jsPsychHtmlKeyboardResponse,
    stimulus: "<div class = centerbox><div class = fixation>+</div></div>",
    choices: ["NO_KEYS"],
    data: function () {
      return {
        trial_id: "memory_only_iti",
        exp_stage: "memory_only_iti",
      };
    },
    trial_duration: 5000,
    stimulus_duration: 5000,
  };

  trials.push(test_trial, memory_only_feedback, iti_block);

  return trials;
};

var memory_only_count = 0;
var memory_only_node = {
  timeline: [feedbackBlock].concat(generate_memory_only_trials()),
  loop_function: function () {
    const { trials } = jsPsych.data.get().filter({
      trial_id: "memory_only_trial",
      block_num: get_memory_only_block_count(),
    });

    memory_only_count++;

    var partial_accuracy = calculatePartialAccuracy(trials);

    if (partial_accuracy >= 0.5 || memory_only_count === 2) {
      feedbackText = `
        <div style='height: 90vh !important; width: 60vw !important;' class="centerbox">
        <p class='block-text'>
          Please keep your fingers on the arrow keys.
        </p>
        <p class='block-text'>
          This is the final part of the task, which combines the two parts you just completed. During this part, you will first see an 8x8 grid filled with black and gray cells.
        </p>
        <p class='block-text'>
          Determine if the grid is <b>${
            processingChoices[0].keyname === "left arrow key"
              ? "symmetric"
              : "asymmetric"
          }</b> <b>(left arrow key)</b> or <b>${
        processingChoices[0].keyname === "left arrow key"
          ? "asymmetric"
          : "symmetric"
      }</b> <b>(right arrow key)</b>.
        </p>
        <p class='block-text'>
          After responding, a new 8x8 grid will immediately appear. Try to complete as many correct symmetry judgments as you can.
        </p>
        <p class='block-text'>
          Then, a 4x4 grid will appear on the screen. This grid will have one cell colored black. Try to remember the location of the black cell.
        </p>
        <p class='block-text'>
          This sequence of 8x8 grids and a 4x4 grid will alternate four times. After the fourth time, a blank 4x4 grid will appear.
        </p>
        <p class='block-text'>
          On the blank 4x4 grid, use the <b>arrow keys</b> to navigate the grid and the <b>spacebar</b> to select the cells you think were colored black in the preceding four 4x4 grids.
          Please select them in the order they were shown (i.e., respond with the location of the first black square in the 4x4 grid, then the 2nd, …).
        </p>
        <p class='block-text'>
          <b>Please note</b>, it's important to be ready to respond promptly when the grid appears, as the screen will move on automatically after a limited time, whether you have responded or not.
        </p>
        <p class='block-text'>
          During the trials, there will be a reminder of the rules at the top of your screen.
          Please make sure you understand the instructions before moving on.
        </p>
        <p class='block-text'>
          Press <i>enter</i> to continue.
        </p>
        </div>
        `;
      return false;
    } else {
      feedbackText = `
          <p class = block-text>
            Your accuracy for the 4x4 grid is low.
          </p>
          <p class = block-text>
            Try your best to recall the black colored cells.
          </p>
          <p class='block-text'>
            Let's repeat the practice once more. Press <i>enter</i> to begin.
          </p>
        `;
      return true;
    }
  },
};

function generatePracticeTrials() {
  var returnArray = [];

  for (let i = 0; i < practiceLen; i++) {
    for (let j = 0; j < numStimuli; j++) {
      returnArray.push(waitNode, stimulusBlock);
    }
    returnArray.push(testTrial, practiceFeedbackBlock, ITIBlock);
  }

  return returnArray;
}

var practiceTrials = generatePracticeTrials();

var conditional_feedback_chart = {
  timeline: [feedbackBlock, instruction_flowchart],
  conditional_function: function () {
    if (practiceCount === 0) return true;
    return false;
  },
};

var conditional_feedback_only = {
  timeline: [feedbackBlock],
  conditional_function: function () {
    if (practiceCount === 0) return false;
    return true;
  },
};

// loop based on criteria
var practiceCount = 0;
var practiceNode = {
  timeline: [conditional_feedback_chart, conditional_feedback_only].concat(
    practiceTrials
  ),
  loop_function: function () {
    var responseGridData = jsPsych.data.get().filter({
      trial_id: "practice_trial",
      condition: "operation",
      block_num: getCurrBlockNum(),
    }).trials;
    var partialAccuracy = calculatePartialAccuracy(responseGridData);

    practiceCount += 1;

    var responseProcessingData = jsPsych.data.get().filter({
      trial_id: "practice_inter-stimulus",
      condition: "operation",
      block_num: getCurrBlockNum() - 1, // since already indexed block above
    }).trials;

    var processingCorrect = 0;
    var totalTrials = 0;
    var rt = 0;

    for (var i = 0; i < responseProcessingData.length; i++) {
      if (responseProcessingData[i].response === -1) {
        totalTrials += 1;
      } else {
        if (responseProcessingData[i].rt !== null) {
          totalTrials += 1;

          if (responseProcessingData[i].correct_trial === 1) {
            processingCorrect += 1;
            rt += responseProcessingData[i].rt;
          }
        }
      }
    }

    var avgProcessingAcc = processingCorrect / totalTrials;
    var avgProcessingRT = rt / processingCorrect;
    var canProceedToTest;

    if (practiceCount === practiceThresh) {
      canProceedToTest = true;
    } else {
      if (
        partialAccuracy >= partialAccuracyThresh &&
        avgProcessingAcc > processingAccThresh &&
        avgProcessingRT < processingRTThresh
      ) {
        canProceedToTest = true;
      } else {
        canProceedToTest = false;
      }
    }

    if (canProceedToTest) {
      feedbackText =
        "<div class = centerbox><p class = center-block-text>We will now start the test portion.</p>" +
        '<p class="block-text">Please keep your fingers on the arrow keys.</p>';

      feedbackText +=
        "<p class = block-text>Press <i>enter</i> to continue.</p></div>";

      expStage = "test";
      return false;
    } else {
      feedbackText =
        "<div class = centerbox><p class = block-text>Please take this time to read your feedback! This screen will advance automatically in 1 minute.</p>";

      if (partialAccuracy < partialAccuracyThresh) {
        feedbackText +=
          "<p class = block-text>Your accuracy for the 4x4 grid is low.</p>" +
          "<p class = block-text>Try your best to recall the black colored cells.</p>";
      }

      if (avgProcessingAcc < processingAccThresh) {
        feedbackText +=
          "<p class = block-text>Your accuracy for the 8x8 grid is low.</p>" +
          `<p class = block-text>Try your best determining if the 8x8 grid is ${
            processingChoices[0].keyname === "left arrow key"
              ? "symmetric"
              : "asymmetric"
          } (left arrow key) or ${
            processingChoices[0].keyname === "left arrow key"
              ? "asymmetric"
              : "symmetric"
          } (right arrow key).</p>`;
      }
      if (avgProcessingRT > processingRTThresh) {
        feedbackText +=
          "<p class = block-text>You are responding too slowly to the 8x8 grids when they appear on the screen.</p>" +
          `<p class = block-text>Try to respond (left arrow/right arrow) as quickly and accurately as possible.</p>`;
      }

      feedbackText +=
        `<p class="block-text">We are now going to repeat the practice round.</p>` +
        `<p class="block-text">Press <i>enter</i> to begin.</p></div>`;

      return true;
    }
  },
};

var postTaskQuestion =
  "Do you have any comments, concerns, or issues pertaining to this task?";

var postTaskBlock = {
  type: jsPsychSurveyText,
  questions: [
    {
      prompt: `<h1 class=block-text>${postTaskQuestion}</h1>`,
      name: postTaskQuestion,
      required: false,
      rows: 20,
      columns: 80,
    },
  ],
  response_ends_trial: true,
  data: {
    trial_id: "post_task_feedback",
  },
  on_finish: function (data) {
    data.question = postTaskQuestion;
    data.response = data.response[postTaskQuestion];
  },
};

var fullscreen = {
  type: jsPsychFullscreen,
  fullscreen_mode: true,
};
var exitFullscreen = {
  type: jsPsychFullscreen,
  fullscreen_mode: false,
};

var endBlock = {
  type: jsPsychHtmlKeyboardResponse,
  data: {
    trial_id: "end",
    exp_id: "operation_span_rdoc__screener",
    trial_duration: 180000,
  },
  trial_duration: 180000,
  stimulus: endText,
  choices: ["Enter"],
  on_finish: data => {
    /*
      By the end of the task, we want to exclude subjects based on their 
      overall accuracy and response times for the practice trials. 

      The values with FLAG_ are thresholds for overall performance. 
      The values with PRACTICE_ are thresholds for the final block of practice trials.

      The idea is that if their overall performance is okay (meets lower threshold) then they pass
      this screener, OR if their final block of practice trials meets the higher threshold, they pass.

      So, they couldn've been okay throughout (passing the lower threshold) or they could've improved
      by the end and understood the task better (passing the higher threshold).
    */

    // FLAGS for overall performance
    const FLAG_PARTIAL_ACCURACY_THRESHOLD = 0.25;
    const FLAG_PROCESSING_ACCURACY_THRESHOLD = 0.6;
    const FLAG_PROCESSING_RT_THRESHOLD = 1250;

    data.FLAG_PARTIAL_ACCURACY_THRESHOLD = FLAG_PARTIAL_ACCURACY_THRESHOLD;
    data.FLAG_PROCESSING_ACCURACY_THRESHOLD = FLAG_PROCESSING_ACCURACY_THRESHOLD;
    data.FLAG_PROCESSING_RT_THRESHOLD = FLAG_PROCESSING_RT_THRESHOLD;

    // FLAGS for final block performance (practice trials)
    const PRACTICE_PARTIAL_ACCURACY_THRESHOLD = partialAccuracyThresh; // 0.75
    const PRACTICE_PROCESSING_ACCURACY_THRESHOLD = processingAccThresh; // 0.85
    const PRACTICE_PROCESSING_RT_THRESHOLD = processingRTThresh; // 1000ms (1s)

    data.PRACTICE_PARTIAL_ACCURACY_THRESHOLD = PRACTICE_PARTIAL_ACCURACY_THRESHOLD;
    data.PRACTICE_PROCESSING_ACCURACY_THRESHOLD = PRACTICE_PROCESSING_ACCURACY_THRESHOLD;
    data.PRACTICE_PROCESSING_RT_THRESHOLD = PRACTICE_PROCESSING_RT_THRESHOLD;

    if (practiceCount < practiceThresh) {
      data.include_subject = 1;
      return;
    }

    const practiceProcessingTrials = jsPsych.data
      .get()
      .filter({ trial_id: "practice_inter-stimulus" }).trials;

    const finalBlockProcessingTrials = jsPsych.data.get().filter({
      trial_id: "practice_inter-stimulus",
      block_num: practiceThresh - 1,
    }).trials;

    const practiceResponseTrials = jsPsych.data
      .get()
      .filter({ trial_id: "practice_trial" }).trials;

    const finalBlockResponseTrials = jsPsych.data.get().filter({
      trial_id: "practice_trial",
      block_num: practiceThresh - 1,
    }).trials;

    const evaluateResponseTrials = trials => {
      const correctTrialsCount = trials.filter(
        obj => obj.correct_trial === 1
      ).length;

      const partialAccuracy =
        trials.reduce((acc, trial) => {
          const { response, spatial_sequence } = trial;
          const correctCount = spatial_sequence.filter(item =>
            response.includes(item)
          ).length;
          const accuracy = correctCount / spatial_sequence.length;
          return acc + accuracy;
        }, 0) / trials.length;

      return {
        accuracy: correctTrialsCount / trials.length, // not used in exclusion, partial accuracy only
        partialAccuracy,
      };
    };

    const evaluateProcessingTrials = trials => {
      const correctTrialsCount = trials.filter(
        obj => obj.correct_trial === 1
      ).length;

      const responseTimes = trials
        .filter(obj => obj.rt !== null && obj.correct_trial === 1)
        .map(obj => obj.rt);

      const meanResponseTime =
        responseTimes.reduce((acc, rt) => acc + rt, 0) / responseTimes.length;

      return {
        accuracy: correctTrialsCount / trials.length,
        meanResponseTime,
      };
    };

    const overallResponsePerformance = evaluateResponseTrials(
      practiceResponseTrials
    );
    const overallProcessingPerformance = evaluateProcessingTrials(
      practiceProcessingTrials
    );

    const finalBlockResponsePerformance = evaluateResponseTrials(
      finalBlockResponseTrials
    );
    const finalBlockProcessingPerformance = evaluateProcessingTrials(
      finalBlockProcessingTrials
    );

    data.overall_response_performance = overallResponsePerformance;
    data.overall_processing_performance = overallProcessingPerformance;
    data.final_block_response_performance = finalBlockResponsePerformance;
    data.final_block_processing_performance = finalBlockProcessingPerformance;

    const isSubjectIncludedFlag = (
      responsePerformance,
      processingPerformance
    ) => {
      return (
        responsePerformance.partialAccuracy >=
          FLAG_PARTIAL_ACCURACY_THRESHOLD &&
        processingPerformance.meanResponseTime <=
          FLAG_PROCESSING_RT_THRESHOLD &&
        processingPerformance.accuracy >= FLAG_PROCESSING_ACCURACY_THRESHOLD
      );
    };

    const isSubjectIncludedPractice = (
      responsePerformance,
      processingPerformance
    ) => {
      return (
        responsePerformance.partialAccuracy >=
          PRACTICE_PARTIAL_ACCURACY_THRESHOLD &&
        processingPerformance.meanResponseTime <=
          PRACTICE_PROCESSING_RT_THRESHOLD &&
        processingPerformance.accuracy >= PRACTICE_PROCESSING_ACCURACY_THRESHOLD
      );
    };

    data.include_subject =
      isSubjectIncludedFlag(
        overallResponsePerformance,
        overallProcessingPerformance
      ) ||
      isSubjectIncludedPractice(
        finalBlockResponsePerformance,
        finalBlockProcessingPerformance
      )
        ? 1
        : 0;
  },
};

operation_span_rdoc__screener_experiment = [];
var operation_span_rdoc__screener_init = () => {
  jsPsych.pluginAPI.preloadImages(images);
  operation_span_rdoc__screener_experiment.push(fullscreen);
  operation_span_rdoc__screener_experiment.push(instructionNode);
  operation_span_rdoc__screener_experiment.push(processing_only_node);
  operation_span_rdoc__screener_experiment.push(memory_only_node);
  operation_span_rdoc__screener_experiment.push(practiceNode);
  operation_span_rdoc__screener_experiment.push(postTaskBlock);
  operation_span_rdoc__screener_experiment.push(endBlock);
  operation_span_rdoc__screener_experiment.push(exitFullscreen);
};
